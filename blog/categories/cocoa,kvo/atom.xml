<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cocoa，kvo | Xblog]]></title>
  <link href="http://passol1988.github.io/blog/categories/cocoa,kvo/atom.xml" rel="self"/>
  <link href="http://passol1988.github.io/"/>
  <updated>2015-09-05T06:41:06+08:00</updated>
  <id>http://passol1988.github.io/</id>
  <author>
    <name><![CDATA[passol]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[KVO程序设计(官方文档)]]></title>
    <link href="http://passol1988.github.io/blog/2014/10/28/kvocheng-xu-she-ji-guan-fang-wen-dang/"/>
    <updated>2014-10-28T00:04:03+08:00</updated>
    <id>http://passol1988.github.io/blog/2014/10/28/kvocheng-xu-she-ji-guan-fang-wen-dang</id>
    <content type="html"><![CDATA[<h1>简要介绍</h1>

<p><a href="" title="key-value observing">kvo</a>是允许对象监视另一对象属性变化的一种机制.</p>

<h2>初步认识</h2>

<p>kvo常用作model和controller相互通信(在osx中, controller通常用绑定实现kvo机制).controller经常监视model属性变化,然后刷新UI.model对象也可以观察另外的model属性变化.</p>

<p>kvo可以观察哪些属性呢?基本属性,对单关系,对多关系等.</p>

<p>下面通过一个例子说明kvo怎么运作
1. 场景:当一个对象的某个对象发生变化,总希望通知另一对象.如银行的存款发生变化总会通知用户
2. 户主就必须注册为观察者,发送<code>addObserver:forKeyPath:options:context:</code>的消息
3. 为了能应对收到通知,观察者还必须实现<code>observeValueForKeyPath:ofObject:change:context:</code>.
4. 当对象属性发生变化时,<code>observeValueForKeyPath:ofObject:change:context:</code>立即调用</p>

<p>kvo的好处在于你不必写很多基础代码,由于已经集成在框架里,甚至可以轻松设置多个观察者.通知不是使用<code>NSNotificationCenter</code>,没有中枢管理所有观察者的通知.<code>NSObject</code>已经提供了KVO的实现,所以你可以完全使用.</p>

<h1>注册kvo</h1>

<p>观察者需要满足三个条件:
1. 被观察的类属性必须兼容kvo(&ldquo;KVO Compliance&rdquo;)
2. <code>addObserver:forKeyPath:options:context:.</code>
3. <code>observeValueForKeyPath:ofObject:change:context:.</code></p>

<h2>注册</h2>

<p>使用<code>NSKeyValueObservingOptionOld</code>或者<code>NSKeyValueObservingOptionNew</code>标记改变前后的值</p>

<pre><code class="objc">
    [account addObserver:inspector
                forKeyPath:@"openingBalance"
                    options:(NSKeyValueObservingOptionNew |                         NSKeyValueObservingOptionOld)
                    context:NULL];
</code></pre>

<p>context是独特的标示符,或者引用指针.</p>

<h2>收到通知</h2>

<p><code>NSKeyValueChangeNewKey</code>
<code>NSKeyValueChangeInsertion</code>
<code>NSKeyValueChangeRemoval</code>
<code>NSKeyValueChangeReplacement</code></p>

<h2>取消观察</h2>

<p>如果context指向的对象,你必须保持强引用防止被删除</p>

<h1>KVO Compliance</h1>

<p>特定值适合kvo comliance:
1. 特定的属性满足kvo
2. 发出通知
3. 关联值注册</p>

<h2>自动改变通知</h2>

<p>使用<code>mutableArrayValueForKey</code></p>

<h2>手动改变通知</h2>

<ul>
<li><code>automaticallyNotifiesObserversForKey</code>返回NO关闭自动通知</li>
</ul>


<pre><code>[self willChangeValueForKey:@"openingBalance"];
_openingBalance = theBalance;[self didChangeValueForKey:@"openingBalance"];
</code></pre>

<h1>注册依赖键</h1>

<h2>单一关系</h2>

<pre><code class="objc">- (NSString *)fullName{
    return [NSString stringWithFormat:@"%@ %@",firstName, lastName];
}
</code></pre>

<p>使用<code>keyPathsForValuesAffectingValueForKey</code>增加对<em>firstName</em>和<em>lastName</em>的观察
也可以直接使用<code>keyPathsForValuesAffectingFullName</code></p>

<h2>对多关系</h2>

<pre><code class="objc">
- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object     change:(NSDictionary *)change context:(void *)context {         if (context == totalSalaryContext) {             [self updateTotalSalary];         }         else         // deal with other observations and/or invoke super...}- (void)updateTotalSalary {
[self setTotalSalary:[self valueForKeyPath:@"employees.@sum.salary"]];}- (void)setTotalSalary:(NSNumber *)newTotalSalary {         if (totalSalary != newTotalSalary) {             [self willChangeValueForKey:@"totalSalary"];             _totalSalary = newTotalSalary;             [self didChangeValueForKey:@"totalSalary"];} }- (NSNumber *)totalSalary {         return _totalSalary;
}         
</code></pre>

<p>也可以使用CoreData</p>
]]></content>
  </entry>
  
</feed>
